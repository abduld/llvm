// ### [ Lexical part ] ########################################################

_ascii_letter
	: 'A' - 'Z'
	| 'a' - 'z'
;

_letter
	: _ascii_letter
	| '$'
	| '-'
	| '.'
	| '_'
;

_decimal_digit
	: '0' - '9'
;

_hex_digit
	: '0' - '9'
	| 'A' - 'F'
	| 'a' - 'f'
;

!comment : ';' { . } '\n' ;

!whitespace : '\x00' | ' ' | '\t' | '\r' | '\n' ;

// === [ Identifiers ] =========================================================

_name
	: _letter { _letter | _decimal_digit }
;

_quoted_name
	: _quoted_string
;

_id
	: _decimals
;

// --- [ Global identifiers ] --------------------------------------------------

global_ident
	: _global_name
	| _global_id
;

_global_name
	: '@' ( _name | _quoted_name )
;

_global_id
	: '@' _id
;

// --- [ Local identifiers ] ---------------------------------------------------

local_ident
	: _local_name
	| _local_id
;

_local_name
	: '%' ( _name | _quoted_name )
;

_local_id
	: '%' _id
;

// --- [ Labels ] --------------------------------------------------------------

//   Label             [-a-zA-Z$._0-9]+:

label_ident
	: ( _letter | _decimal_digit ) { _letter | _decimal_digit } ':'
	| _quoted_string ':'
;

// --- [ Attribute group identifiers ] -----------------------------------------

attr_group_id
	: '#' _id
;

// === [ Integer literals ] ====================================================

//   Integer           [-]?[0-9]+

int_lit
	: _decimal_lit
;

_decimal_lit
	: [ '-' ] _decimals
;

_decimals
	: _decimal_digit { _decimal_digit }
;

// === [ Float literals ] ====================================================

//   FPConstant        [-+]?[0-9]+[.][0-9]*([eE][-+]?[0-9]+)?

float_lit
	: _frac_lit
	| _sci_lit
	| _float_hex_lit
;

_frac_lit
	: ( '+' | '-' ) _decimals '.' { _decimal_digit }
	| _decimals '.' { _decimal_digit }
;

_sci_lit
	: _frac_lit ( 'e' | 'E' ) ( '+' | '-' ) _decimals
	| _frac_lit ( 'e' | 'E' ) _decimals
;

//   HexFPConstant     0x[0-9A-Fa-f]+     // 16 hex digits
//   HexFP80Constant   0xK[0-9A-Fa-f]+    // 20 hex digits
//   HexFP128Constant  0xL[0-9A-Fa-f]+    // 32 hex digits
//   HexPPC128Constant 0xM[0-9A-Fa-f]+    // 32 hex digits
//   HexHalfConstant   0xH[0-9A-Fa-f]+    // 4 hex digits

_float_hex_lit
	:  '0' 'x'      _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit
	|  '0' 'x' 'K'  _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit
	|  '0' 'x' 'L'  _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit
	|  '0' 'x' 'M'  _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit _hex_digit
	|  '0' 'x' 'H'  _hex_digit _hex_digit _hex_digit _hex_digit
;

// === [ String literals ] =====================================================

_quoted_string
	: '"' { . } '"'
;

string_lit
	: _quoted_string
;

// === [ Types ] ===============================================================

int_type
	: 'i' _decimals
;

// ### [ Syntactic part ] ######################################################

<< import (
	"github.com/llir/llvm/asm/internal/ast"
	"github.com/llir/llvm/asm/internal/astx"
) >>

// === [ Modules ] =============================================================

Module
	: TopLevelDecls   << astx.NewModule($0) >>
;

TopLevelDecls
	: empty
	| TopLevelDeclList
;

TopLevelDeclList
	: TopLevelDecl                    << astx.NewTopLevelDeclList($0) >>
	| TopLevelDeclList TopLevelDecl   << astx.AppendTopLevelDecl($0, $1) >>
;

TopLevelDecl
	: SourceFilename
	| TargetSpec
	| TypeDef
	| Global
	| FunctionDecl
	| FunctionDef
	| AttrGroupDef
;

// === [ Source filename ] =====================================================

SourceFilename
	: "source_filename" "=" string_lit   << nil, nil >>
;

// === [ Target specifiers ] ===================================================

TargetSpec
	: "target" DataLayout     << nil, nil >>
	| "target" TargetTriple   << nil, nil >>
;

DataLayout
	: "datalayout" "=" string_lit
;

TargetTriple
	: "triple" "=" string_lit
;

// === [ Type definitions ] ====================================================

TypeDef
	: LocalIdent "=" "type" Type       << astx.NewTypeDef($0, $3) >>
	| LocalIdent "=" "type" "opaque"   << astx.NewTypeDefOpaque($0) >>
;

// === [ Global variables ] ====================================================

Global
	: GlobalIdent "=" ExternLinkage OptUnnamedAddr Immutable FirstClassType OptCommaAlign        << astx.NewGlobalDecl($0, $4, $5) >>
	| GlobalIdent "=" OptLinkage OptUnnamedAddr Immutable FirstClassType Constant OptCommaAlign  << astx.NewGlobalDef($0, $4, $5, $6) >>
;

OptLinkage
	: empty
	| Linkage
;

Linkage
	: "private"
	| "internal"
	| "available_externally"
	| "linkonce"
	| "weak"
	| "common"
	| "appending"
	| "linkonce_odr"
	| "weak_odr"
;

OptExternLinkage
	: empty
	| ExternLinkage
;

ExternLinkage
	: "extern_weak"
	| "external"
;

OptUnnamedAddr
	: empty
	| UnnamedAddr
;

UnnamedAddr
	: "unnamed_addr"
	| "local_unnamed_addr"
;

Immutable
	: "constant"   << true, nil >>
	| "global"     << false, nil >>
;

OptCommaAlign
	: empty
	| "," Align
;

Align
	: "align" int_lit
;

// === [ Functions ] ===========================================================

FunctionDecl
	: "declare" OptExternLinkage FunctionHeader OptUnnamedAddr FuncAttrs OptAlign   << $2, nil >>
;

FunctionDef
	: "define" OptLinkage FunctionHeader OptUnnamedAddr FuncAttrs OptAlign FunctionBody   << astx.NewFunctionDef($2, $6) >>
;

FunctionHeader
	: ParamAttrs Type GlobalIdent "(" Params ")"   << astx.NewFunctionDecl($1, $2, $4) >>
;

Params
	: empty
	| "..."                 << astx.NewParams(nil, true) >>
	| ParamList             << astx.NewParams($0, false) >>
	| ParamList "," "..."   << astx.NewParams($0, true) >>
;

ParamList
	: Param                 << astx.NewParamList($0) >>
	| ParamList "," Param   << astx.AppendParam($0, $2) >>
;

Param
	: FirstClassType ParamAttrs              << astx.NewParam($0, nil) >>
	| FirstClassType ParamAttrs LocalIdent   << astx.NewParam($0, $2) >>
;

ParamAttrs
	: empty
	| ParamAttrs ParamAttr
;

// ref: http://llvm.org/docs/LangRef.html#parameter-attributes
ParamAttr
	: string_lit
	| string_lit "=" string_lit
	| Align
	| "byval"
	| "dereferenceable" "(" int_lit ")"
	| "dereferenceable_or_null" "(" int_lit ")"
	| "inalloca"
	| "inreg"
	| "nest"
	| "noalias"
	| "nocapture"
	| "nonnull"
	| "readnone"  // NOTE: accepted by lli but not part of spec
	| "readonly"  // NOTE: accepted by lli but not part of spec
	| "returned"
	| "signext"
	| "sret"
	| "swifterror"
	| "swiftself"
	| "writeonly" // NOTE: accepted by lli but not part of spec
	| "zeroext"
;

OptAlign
	: empty
	| Align
;

FunctionBody
	: "{" BasicBlocks "}"   << $1, nil >>
;

// === [ Attribute group definitions ] =========================================

AttrGroupDef
	: "attributes" AttrGroupID "=" "{" FuncAttrs "}"   << nil, nil >>
;

FuncAttrs
	: empty
	| FuncAttrs FuncAttr
;

// ref: http://llvm.org/docs/LangRef.html#function-attributes
FuncAttr
	: string_lit
	| string_lit "=" string_lit
	| AttrGroupID
	| "alignstack" "(" int_lit ")"
	| "allocsize" "(" int_lit OptAllocSizeNElems ")"
	| "alwaysinline"
	| "argmemonly"
	| "builtin"
	| "cold"
	| "convergent"
	| "inaccessiblemem_or_argmemonly"
	| "inaccessiblememonly"
	| "inlinehint"
	| "jumptable"
	| "minsize"
	| "naked"
	| "nobuiltin"
	| "noduplicate"
	| "noimplicitfloat"
	| "noinline"
	| "nonlazybind"
	| "norecurse"
	| "noredzone"
	| "noreturn"
	| "nounwind"
	| "optnone"
	| "optsize"
	| "readnone"
	| "readonly"
	| "returns_twice"
	| "safestack"
	| "sanitize_address"
	| "sanitize_memory"
	| "sanitize_thread"
	| "ssp"
	| "sspreq"
	| "sspstrong"
	| "uwtable"
	| "writeonly"
;

OptAllocSizeNElems
	: "," int_lit
;

// === [ Identifiers ] =========================================================

GlobalIdent
	: global_ident   << astx.NewGlobalIdent($0) >>
;

LocalIdent
	: local_ident   << astx.NewLocalIdent($0) >>
;

LabelIdent
	: label_ident   << astx.NewLabelIdent($0) >>
;

AttrGroupID
	: attr_group_id
;

// === [ Types ] ===============================================================

Type
	: VoidType
	| FuncType
	| FirstClassType
;

VoidType
	: "void"   << &ast.VoidType{}, nil >>
;

FuncType
	: Type "(" Params ")"   << astx.NewFuncType($0, $2) >>
;

FirstClassType
	: IntType
	| FloatType
	| PointerType
	| VectorType
	| LabelType
	| MetadataType
	| ArrayType
	| StructType
	| NamedType
;

IntType
	: int_type   << astx.NewIntType($0) >>
;

FloatType
	: "half"        << &ast.FloatType{Kind: ast.FloatKindIEEE_16}, nil >>
	| "float"       << &ast.FloatType{Kind: ast.FloatKindIEEE_32}, nil >>
	| "double"      << &ast.FloatType{Kind: ast.FloatKindIEEE_64}, nil >>
	| "fp128"       << &ast.FloatType{Kind: ast.FloatKindIEEE_128}, nil >>
	| "x86_fp80"    << &ast.FloatType{Kind: ast.FloatKindDoubleExtended_80}, nil >>
	| "ppc_fp128"   << &ast.FloatType{Kind: ast.FloatKindDoubleDouble_128}, nil >>
;

PointerType
	: Type OptAddrSpace "*"   << astx.NewPointerType($0, $1) >>
;

OptAddrSpace
	: empty
	| "addrspace" "(" IntConst ")"   << astx.NewAddrSpace($2) >>
;

VectorType
	: "<" IntConst "x" FirstClassType ">"   << astx.NewVectorType($1, $3) >>
;

LabelType
	: "label"   << &ast.LabelType{}, nil >>
;

MetadataType
	: "metadata"   << &ast.MetadataType{}, nil >>
;

ArrayType
	: "[" IntConst "x" FirstClassType "]"   << astx.NewArrayType($1, $3) >>
;

StructType
	: "{" Fields "}"   << astx.NewStructType($1) >>
;

Fields
	: empty
	| FieldList
;

FieldList
	: FirstClassType                 << astx.NewTypeList($0) >>
	| FieldList "," FirstClassType   << astx.AppendType($0, $2) >>
;

NamedType
	: LocalIdent   << astx.NewTypeIdent($0) >>
;

// === [ Values ] ==============================================================

Value
	: LocalIdent
	| Constant
;

// === [ Constants ] ===========================================================

Constant
	: IntConst
	| FloatConst
	| NullConst
	| VectorConst
	| ArrayConst
	| CharArrayConst
	| StructConst
	| ZeroInitializerConst
	| GlobalIdent
	| ConstExpr
;

IntConst
	: int_lit   << astx.NewIntLit($0) >>
	| "true"    << astx.NewIntLit($0) >>
	| "false"   << astx.NewIntLit($0) >>
;

FloatConst
	: float_lit   << astx.NewFloatLit($0) >>
;

NullConst
	: "null"   << &astx.NullLit{}, nil >>
;

VectorConst
	: "<" Elems ">"   << astx.NewVectorConst($1) >>
;

ArrayConst
	: "[" Elems "]"   << astx.NewArrayConst($1) >>
;

Elems
	: empty
	| ElemList
;

ElemList
	: Elem                << astx.NewConstantList($0) >>
	| ElemList "," Elem   << astx.AppendConstant($0, $2) >>
;

Elem
	: FirstClassType Value   << astx.NewConstant($0, $1) >>
;

CharArrayConst
	: "c" string_lit   << astx.NewCharArrayConst($1) >>
;

StructConst
	: "{" Elems "}"   << astx.NewStructConst($1) >>
;

ZeroInitializerConst
	: "zeroinitializer"   << &astx.ZeroInitializerLit{}, nil >>
;

ConstExpr
	// Binary expressions
	: AddExpr
	| FAddExpr
	| SubExpr
	| FSubExpr
	| MulExpr
	| FMulExpr
	| UDivExpr
	| SDivExpr
	| FDivExpr
	| URemExpr
	| SRemExpr
	| FRemExpr
	// Bitwise expressions
	| ShlExpr
	| LShrExpr
	| AShrExpr
	| AndExpr
	| OrExpr
	| XorExpr
	// Memory expressions
	| GetElementPtrExpr
	// Conversion expressions
	| TruncExpr
	| ZExtExpr
	| SExtExpr
	| FPTruncExpr
	| FPExtExpr
	| FPToUIExpr
	| FPToSIExpr
	| UIToFPExpr
	| SIToFPExpr
	| PtrToIntExpr
	| IntToPtrExpr
	| BitCastExpr
	| AddrSpaceCastExpr
	// Other expressions
	| ICmpExpr
	| FCmpExpr
	| SelectExpr
;

// --- [ Binary expressions ] --------------------------------------------------

AddExpr
	: "add" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewAddExpr($2, $3, $5, $6) >>
;

FAddExpr
	: "fadd" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewFAddExpr($2, $3, $5, $6) >>
;

SubExpr
	: "sub" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewSubExpr($2, $3, $5, $6) >>
;

FSubExpr
	: "fsub" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewFSubExpr($2, $3, $5, $6) >>
;

MulExpr
	: "mul" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewMulExpr($2, $3, $5, $6) >>
;

FMulExpr
	: "fmul" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewFMulExpr($2, $3, $5, $6) >>
;

UDivExpr
	: "udiv" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewUDivExpr($2, $3, $5, $6) >>
;

SDivExpr
	: "sdiv" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewSDivExpr($2, $3, $5, $6) >>
;

FDivExpr
	: "fdiv" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewFDivExpr($2, $3, $5, $6) >>
;

URemExpr
	: "urem" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewURemExpr($2, $3, $5, $6) >>
;

SRemExpr
	: "srem" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewSRemExpr($2, $3, $5, $6) >>
;

FRemExpr
	: "frem" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewFRemExpr($2, $3, $5, $6) >>
;

// --- [ Bitwise expressions ] -------------------------------------------------

ShlExpr
	: "shl" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewShlExpr($2, $3, $5, $6) >>
;

LShrExpr
	: "lshr" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewLShrExpr($2, $3, $5, $6) >>
;

AShrExpr
	: "ashr" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewAShrExpr($2, $3, $5, $6) >>
;

AndExpr
	: "and" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewAndExpr($2, $3, $5, $6) >>
;

OrExpr
	: "or" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewOrExpr($2, $3, $5, $6) >>
;

XorExpr
	: "xor" "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewXorExpr($2, $3, $5, $6) >>
;

// --- [ Memory expressions ] --------------------------------------------------

GetElementPtrExpr
	: "getelementptr" OptInbounds "(" FirstClassType "," FirstClassType Constant ConstIndices ")"   << astx.NewGetElementPtrExpr($3, $5, $6, $7) >>
;

OptInbounds
	: empty
	| "inbounds"
;

ConstIndices
	: empty
	| "," ConstIndexList   << $1, nil >>
;

ConstIndexList
	: ConstIndex                      << astx.NewConstantList($0) >>
	| ConstIndexList "," ConstIndex   << astx.AppendConstant($0, $2) >>
;

ConstIndex
	: IntType Constant   << astx.NewConstant($0, $1) >>
;

// --- [ Conversion expressions ] ----------------------------------------------

TruncExpr
	: "trunc" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewTruncExpr($2, $3, $5) >>
;

ZExtExpr
	: "zext" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewZExtExpr($2, $3, $5) >>
;

SExtExpr
	: "sext" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewSExtExpr($2, $3, $5) >>
;

FPTruncExpr
	: "fptrunc" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewFPTruncExpr($2, $3, $5) >>
;

FPExtExpr
	: "fpext" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewFPExtExpr($2, $3, $5) >>
;

FPToUIExpr
	: "fptoui" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewFPToUIExpr($2, $3, $5) >>
;

FPToSIExpr
	: "fptosi" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewFPToSIExpr($2, $3, $5) >>
;

UIToFPExpr
	: "uitofp" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewUIToFPExpr($2, $3, $5) >>
;

SIToFPExpr
	: "sitofp" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewSIToFPExpr($2, $3, $5) >>
;

PtrToIntExpr
	: "ptrtoint" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewPtrToIntExpr($2, $3, $5) >>
;

IntToPtrExpr
	: "inttoptr" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewIntToPtrExpr($2, $3, $5) >>
;

BitCastExpr
	: "bitcast" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewBitCastExpr($2, $3, $5) >>
;

AddrSpaceCastExpr
	: "addrspacecast" "(" FirstClassType Constant "to" FirstClassType ")"   << astx.NewAddrSpaceCastExpr($2, $3, $5) >>
;

// --- [ Other expressions ] ---------------------------------------------------

ICmpExpr
	: "icmp" IntPred "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewICmpExpr($1, $3, $4, $6, $7) >>
;

FCmpExpr
	: "fcmp" FloatPred "(" FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewFCmpExpr($1, $3, $4, $6, $7) >>
;

SelectExpr
	: "select" "(" FirstClassType Constant "," FirstClassType Constant "," FirstClassType Constant ")"   << astx.NewSelectExpr($2, $3, $5, $6, $8, $9) >>
;

// === [ Basic blocks ] ========================================================

BasicBlocks
	: empty
	| BasicBlockList
;

BasicBlockList
	: BasicBlock                  << astx.NewBasicBlockList($0) >>
	| BasicBlockList BasicBlock   << astx.AppendBasicBlock($0, $1) >>
;

BasicBlock
	: Instructions Terminator              << astx.NewBasicBlock(nil, $0, $1) >>
	| LabelIdent Instructions Terminator   << astx.NewBasicBlock($0, $1, $2) >>
;

// === [ Instructions ] ========================================================

Instructions
	: empty
	| InstructionList
;

InstructionList
	: Instruction                   << astx.NewInstructionList($0) >>
	| InstructionList Instruction   << astx.AppendInstruction($0, $1) >>
;

Instruction
	: StoreInst
	| LocalIdent "=" ValueInstruction   << astx.NewNamedInstruction($0, $2) >>
	| ValueInstruction
;

ValueInstruction
	// Binary instructions
	: AddInst
	| FAddInst
	| SubInst
	| FSubInst
	| MulInst
	| FMulInst
	| UDivInst
	| SDivInst
	| FDivInst
	| URemInst
	| SRemInst
	| FRemInst
	// Bitwise instructions
	| ShlInst
	| LShrInst
	| AShrInst
	| AndInst
	| OrInst
	| XorInst
	// Memory instructions
	| AllocaInst
	| LoadInst
	| GetElementPtrInst
	// Conversion instructions
	| TruncInst
	| ZExtInst
	| SExtInst
	| FPTruncInst
	| FPExtInst
	| FPToUIInst
	| FPToSIInst
	| UIToFPInst
	| SIToFPInst
	| PtrToIntInst
	| IntToPtrInst
	| BitCastInst
	| AddrSpaceCastInst
	// Other instructions
	| ICmpInst
	| FCmpInst
	| PhiInst
	| SelectInst
	| CallInst
;

// --- [ Binary instructions ] -------------------------------------------------

AddInst
	: "add" OverflowFlags FirstClassType Value "," Value   << astx.NewAddInst($2, $3, $5) >>
;

FAddInst
	: "fadd" FastMathFlags FirstClassType Value "," Value   << astx.NewFAddInst($2, $3, $5) >>
;

SubInst
	: "sub" OverflowFlags FirstClassType Value "," Value   << astx.NewSubInst($2, $3, $5) >>
;

FSubInst
	: "fsub" FastMathFlags FirstClassType Value "," Value   << astx.NewFSubInst($2, $3, $5) >>
;

MulInst
	: "mul" OverflowFlags FirstClassType Value "," Value   << astx.NewMulInst($2, $3, $5) >>
;

FMulInst
	: "fmul" FastMathFlags FirstClassType Value "," Value   << astx.NewFMulInst($2, $3, $5) >>
;

UDivInst
	: "udiv" FirstClassType Value "," Value   << astx.NewUDivInst($1, $2, $4) >>
;

SDivInst
	: "sdiv" ExactFlags FirstClassType Value "," Value   << astx.NewSDivInst($2, $3, $5) >>
;

FDivInst
	: "fdiv" FastMathFlags FirstClassType Value "," Value   << astx.NewFDivInst($2, $3, $5) >>
;

URemInst
	: "urem" ExactFlags FirstClassType Value "," Value   << astx.NewURemInst($2, $3, $5) >>
;

SRemInst
	: "srem" FirstClassType Value "," Value   << astx.NewSRemInst($1, $2, $4) >>
;

FRemInst
	: "frem" FastMathFlags FirstClassType Value "," Value   << astx.NewFRemInst($2, $3, $5) >>
;

OverflowFlags
	: empty
	| OverflowFlagList
;

OverflowFlagList
	: OverflowFlag
	| OverflowFlagList OverflowFlag
;

OverflowFlag
	: "nuw"
	| "nsw"
;

FastMathFlags
	: empty
	| FastMathFlagList
;

FastMathFlagList
	: FastMathFlag
	| FastMathFlagList FastMathFlag
;

FastMathFlag
	: "nnan"
	| "ninf"
	| "nsz"
	| "arcp"
	| "fast"
;

ExactFlags
	: empty
	| "exact"
;

// --- [ Bitwise instructions ] ------------------------------------------------

ShlInst
	: "shl" OverflowFlags FirstClassType Value "," Value   << astx.NewShlInst($2, $3, $5) >>
;

LShrInst
	: "lshr" ExactFlags FirstClassType Value "," Value   << astx.NewLShrInst($2, $3, $5) >>
;

AShrInst
	: "ashr" ExactFlags FirstClassType Value "," Value   << astx.NewAShrInst($2, $3, $5) >>
;

AndInst
	: "and" FirstClassType Value "," Value   << astx.NewAndInst($1, $2, $4) >>
;

OrInst
	: "or" FirstClassType Value "," Value   << astx.NewOrInst($1, $2, $4) >>
;

XorInst
	: "xor" FirstClassType Value "," Value   << astx.NewXorInst($1, $2, $4) >>
;

// --- [ Memory instructions ] -------------------------------------------------

AllocaInst
	: "alloca" FirstClassType AllocaOptions   << astx.NewAllocaInst($1, $2) >>
;

// TODO: Clean up when the parser generator no longer introduces ambiguities
// through the limitation of 1 rune lookahead.
AllocaOptions
	: "," NElems OptCommaAlign   << $1, nil >>
	| OptCommaAlign              << nil, nil >>
;

NElems
	: FirstClassType Value   << astx.NewValue($0, $1) >>
;

LoadInst
	: "load" FirstClassType "," PointerType Value OptCommaAlign   << astx.NewLoadInst($1, $3, $4) >>
;

GetElementPtrInst
	: "getelementptr" OptInbounds FirstClassType "," FirstClassType Value Indices   << astx.NewGetElementPtrInst($2, $4, $5, $6) >>
;

Indices
	: empty
	| "," IndexList   << $1, nil >>
;

IndexList
	: Index                 << astx.NewValueList($0) >>
	| IndexList "," Index   << astx.AppendValue($0, $2) >>
;

Index
	: IntType Value   << astx.NewValue($0, $1) >>
;

StoreInst
	: "store" FirstClassType Value "," PointerType Value OptCommaAlign   << astx.NewStoreInst($1, $2, $4, $5) >>
;

// --- [ Conversion instructions ] ---------------------------------------------

TruncInst
	: "trunc" FirstClassType Value "to" FirstClassType   << astx.NewTruncInst($1, $2, $4) >>
;

ZExtInst
	: "zext" FirstClassType Value "to" FirstClassType   << astx.NewZExtInst($1, $2, $4) >>
;

SExtInst
	: "sext" FirstClassType Value "to" FirstClassType   << astx.NewSExtInst($1, $2, $4) >>
;

FPTruncInst
	: "fptrunc" FirstClassType Value "to" FirstClassType   << astx.NewFPTruncInst($1, $2, $4) >>
;

FPExtInst
	: "fpext" FirstClassType Value "to" FirstClassType   << astx.NewFPExtInst($1, $2, $4) >>
;

FPToUIInst
	: "fptoui" FirstClassType Value "to" FirstClassType   << astx.NewFPToUIInst($1, $2, $4) >>
;

FPToSIInst
	: "fptosi" FirstClassType Value "to" FirstClassType   << astx.NewFPToSIInst($1, $2, $4) >>
;

UIToFPInst
	: "uitofp" FirstClassType Value "to" FirstClassType   << astx.NewUIToFPInst($1, $2, $4) >>
;

SIToFPInst
	: "sitofp" FirstClassType Value "to" FirstClassType   << astx.NewSIToFPInst($1, $2, $4) >>
;

PtrToIntInst
	: "ptrtoint" FirstClassType Value "to" FirstClassType   << astx.NewPtrToIntInst($1, $2, $4) >>
;

IntToPtrInst
	: "inttoptr" FirstClassType Value "to" FirstClassType   << astx.NewIntToPtrInst($1, $2, $4) >>
;

BitCastInst
	: "bitcast" FirstClassType Value "to" FirstClassType   << astx.NewBitCastInst($1, $2, $4) >>
;

AddrSpaceCastInst
	: "addrspacecast" FirstClassType Value "to" FirstClassType   << astx.NewAddrSpaceCastInst($1, $2, $4) >>
;

// --- [ Other instructions ] --------------------------------------------------

ICmpInst
	: "icmp" IntPred FirstClassType Value "," Value   << astx.NewICmpInst($1, $2, $3, $5) >>
;

IntPred
	: "eq"    << ast.IntEQ, nil >>
	| "ne"    << ast.IntNE, nil >>
	| "ugt"   << ast.IntUGT, nil >>
	| "uge"   << ast.IntUGE, nil >>
	| "ult"   << ast.IntULT, nil >>
	| "ule"   << ast.IntULE, nil >>
	| "sgt"   << ast.IntSGT, nil >>
	| "sge"   << ast.IntSGE, nil >>
	| "slt"   << ast.IntSLT, nil >>
	| "sle"   << ast.IntSLE, nil >>
;

FCmpInst
	: "fcmp" FastMathFlags FloatPred FirstClassType Value "," Value   << astx.NewFCmpInst($2, $3, $4, $6) >>
;

FloatPred
	: "false"   << ast.FloatFalse, nil >>
	| "oeq"     << ast.FloatOEQ, nil >>
	| "ogt"     << ast.FloatOGT, nil >>
	| "oge"     << ast.FloatOGE, nil >>
	| "olt"     << ast.FloatOLT, nil >>
	| "ole"     << ast.FloatOLE, nil >>
	| "one"     << ast.FloatONE, nil >>
	| "ord"     << ast.FloatORD, nil >>
	| "ueq"     << ast.FloatUEQ, nil >>
	| "ugt"     << ast.FloatUGT, nil >>
	| "uge"     << ast.FloatUGE, nil >>
	| "ult"     << ast.FloatULT, nil >>
	| "ule"     << ast.FloatULE, nil >>
	| "une"     << ast.FloatUNE, nil >>
	| "uno"     << ast.FloatUNO, nil >>
	| "true"    << ast.FloatTrue, nil >>
;

PhiInst
	: "phi" FirstClassType IncomingList   << astx.NewPhiInst($1, $2) >>
;

IncomingList
	: Incoming                    << astx.NewIncomingList($0) >>
	| IncomingList "," Incoming   << astx.AppendIncoming($0, $2) >>
;

Incoming
	: "[" Value "," LocalIdent "]"   << astx.NewIncoming($1, $3) >>
;

SelectInst
	: "select" FirstClassType Value "," FirstClassType Value "," FirstClassType Value   << astx.NewSelectInst($1, $2, $4, $5, $7, $8) >>
;

CallInst
	: "call" FastMathFlags ParamAttrs Type Value "(" Args ")" FuncAttrs   << astx.NewCallInst($3, $4, $6) >>
;

Args
	: empty
	| ArgList
;

ArgList
	: Arg               << astx.NewValueList($0) >>
	| ArgList "," Arg   << astx.AppendValue($0, $2) >>
;

Arg
	: FirstClassType ParamAttrs Value   << astx.NewValue($0, $2) >>
;

// === [ Terminators ] =========================================================

Terminator
	: RetTerm
	| BrTerm
	| CondBrTerm
	| SwitchTerm
	| UnreachableTerm
;

RetTerm
	: "ret" VoidType               << &ast.TermRet{}, nil >>
	| "ret" FirstClassType Value   << astx.NewRetTerm($1, $2) >>
;

BrTerm
	: "br" LabelType LocalIdent   << astx.NewBrTerm($1, $2) >>
;

CondBrTerm
	: "br" IntType Value "," LabelType LocalIdent "," LabelType LocalIdent   << astx.NewCondBrTerm($1, $2, $4, $5, $7, $8) >>
;

SwitchTerm
	: "switch" IntType Value "," LabelType LocalIdent "[" Cases "]"   << astx.NewSwitchTerm($1, $2, $4, $5, $7) >>
;

Cases
	: empty
	| CastList
;

CastList
	: Case            << astx.NewCaseList($0) >>
	| CastList Case   << astx.AppendCase($0, $1) >>
;

Case
	: IntType Value "," LabelType LocalIdent   << astx.NewCase($0, $1, $3, $4) >>
;

UnreachableTerm
	: "unreachable"   << &ast.TermUnreachable{}, nil >>
;
